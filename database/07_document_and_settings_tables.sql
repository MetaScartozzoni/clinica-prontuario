-- =====================================================================================
-- Arquivo: 07_document_and_settings_tables.sql
-- Descrição: Define tabelas para documentos, configurações da clínica e outros.
-- Ordem de execução: 7
-- =====================================================================================

CREATE TABLE IF NOT EXISTS public.surgery_document_templates (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    document_name TEXT NOT NULL,
    document_type TEXT NOT NULL,
    content_template TEXT,
    surgery_type_id UUID REFERENCES public.surgery_types(id),
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.patient_surgery_documents (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    patient_id UUID NOT NULL REFERENCES public.patients(id),
    surgery_schedule_id UUID REFERENCES public.surgery_schedule(id),
    document_template_id BIGINT REFERENCES public.surgery_document_templates(id),
    document_name TEXT NOT NULL,
    document_type TEXT NOT NULL,
    generated_document_url TEXT,
    status TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.document_generation_history (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    patient_surgery_document_id BIGINT NOT NULL REFERENCES public.patient_surgery_documents(id),
    action_type TEXT NOT NULL,
    notes TEXT,
    generation_date TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    generated_by UUID REFERENCES public.profiles(id)
);

CREATE TABLE IF NOT EXISTS public.surgery_checklist_items (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    surgery_schedule_id UUID NOT NULL REFERENCES public.surgery_schedule(id),
    description TEXT NOT NULL,
    category TEXT NOT NULL,
    is_completed BOOLEAN NOT NULL DEFAULT FALSE,
    due_date DATE,
    completed_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.clinic_settings (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    setting_name TEXT NOT NULL UNIQUE,
    setting_value TEXT NOT NULL,
    description TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.quote_items (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    quote_id UUID NOT NULL,
    description TEXT NOT NULL,
    quantity INTEGER NOT NULL,
    unit_price NUMERIC NOT NULL
);

CREATE TABLE IF NOT EXISTS public.prescriptions (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    medical_record_id BIGINT NOT NULL,
    medication_name TEXT NOT NULL,
    dosage TEXT NOT NULL,
    frequency TEXT NOT NULL,
    duration TEXT,
    instructions TEXT,
    quantity INTEGER,
    refills INTEGER,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.medical_evaluation_images (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    evaluation_id BIGINT NOT NULL,
    original_image_url TEXT,
    annotated_image_data JSONB,
    description TEXT
);

CREATE TABLE IF NOT EXISTS public.message_templates (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    template_name TEXT NOT NULL UNIQUE,
    description TEXT,
    body TEXT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE
);

CREATE TABLE IF NOT EXISTS public.auth_logs (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    event_type TEXT NOT NULL,
    user_id UUID,
    user_email TEXT,
    ip_address TEXT,
    user_agent TEXT,
    error_message TEXT,
    details JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW()
);