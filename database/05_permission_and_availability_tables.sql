-- =====================================================================================
-- Arquivo: 05_permission_and_availability_tables.sql
-- Descrição: Define tabelas de permissões de usuário e disponibilidade de profissionais.
-- Ordem de execução: 5
-- =====================================================================================

CREATE TABLE IF NOT EXISTS public.user_permissions (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    profile_id INTEGER NOT NULL UNIQUE,
    can_view_patients BOOLEAN DEFAULT FALSE,
    can_create_patients BOOLEAN DEFAULT FALSE,
    can_update_patients BOOLEAN DEFAULT FALSE,
    can_delete_patients BOOLEAN DEFAULT FALSE,
    can_view_appointments BOOLEAN DEFAULT FALSE,
    can_create_appointments BOOLEAN DEFAULT FALSE,
    can_update_appointments BOOLEAN DEFAULT FALSE,
    can_delete_appointments BOOLEAN DEFAULT FALSE,
    can_view_medical_records BOOLEAN DEFAULT FALSE,
    can_create_medical_records BOOLEAN DEFAULT FALSE,
    can_update_medical_records BOOLEAN DEFAULT FALSE,
    can_delete_medical_records BOOLEAN DEFAULT FALSE,
    can_view_finances BOOLEAN DEFAULT FALSE,
    can_create_finances BOOLEAN DEFAULT FALSE,
    can_update_finances BOOLEAN DEFAULT FALSE,
    can_delete_finances BOOLEAN DEFAULT FALSE
);

CREATE TABLE IF NOT EXISTS public.availability (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    professional_id TEXT NOT NULL,
    day_of_week INTEGER NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.blocked_dates (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    professional_id TEXT NOT NULL,
    blocked_date DATE NOT NULL,
    reason TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.professional_availability (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    professional_id BIGINT NOT NULL REFERENCES public.professionals(id) ON DELETE CASCADE,
    day_of_week INTEGER NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    is_available BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.professional_time_off (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    professional_id BIGINT NOT NULL REFERENCES public.professionals(id) ON DELETE CASCADE,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    reason TEXT,
    is_approved BOOLEAN NOT NULL DEFAULT FALSE,
    approved_by UUID REFERENCES public.profiles(id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.video_rooms (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    room_name TEXT NOT NULL,
    meeting_id TEXT NOT NULL,
    host_url TEXT NOT NULL,
    room_url TEXT NOT NULL,
    created_by UUID NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    start_date TIMESTAMPTZ NOT NULL,
    end_date TIMESTAMPTZ NOT NULL,
    is_locked BOOLEAN DEFAULT FALSE
);