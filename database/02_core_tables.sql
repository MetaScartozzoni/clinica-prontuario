-- =====================================================================================
-- Arquivo: 02_core_tables.sql
-- Descrição: Define as tabelas centrais do sistema: job_prefixes, profiles, patients, professionals.
-- Ordem de execução: 2
-- =====================================================================================

CREATE TABLE IF NOT EXISTS public.job_prefixes (
    job_title TEXT PRIMARY KEY NOT NULL,
    prefix TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.profiles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    full_name TEXT GENERATED ALWAYS AS (TRIM(first_name || ' ' || last_name)) STORED,
    email TEXT NOT NULL UNIQUE,
    phone TEXT,
    role TEXT NOT NULL DEFAULT 'patient',
    job_title TEXT REFERENCES public.job_prefixes(job_title),
    status TEXT NOT NULL DEFAULT 'pending',
    user_code TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.patients (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    profile_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    full_name TEXT GENERATED ALWAYS AS (TRIM(first_name || ' ' || last_name)) STORED,
    date_of_birth DATE,
    gender TEXT,
    email TEXT,
    phone TEXT NOT NULL,
    emergency_contact TEXT,
    emergency_phone TEXT,
    cpf TEXT,
    rg TEXT,
    address_street TEXT,
    address_number TEXT,
    address_complement TEXT,
    address_neighborhood TEXT,
    address_city TEXT,
    address_state TEXT,
    address_zipcode TEXT,
    blood_type TEXT,
    allergies TEXT,
    medical_history TEXT,
    health_insurance TEXT,
    health_insurance_number TEXT,
    health_insurance_expiration DATE,
    notes TEXT,
    source_id BIGINT,
    created_by UUID REFERENCES public.profiles(id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.professionals (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    profile_id UUID UNIQUE REFERENCES public.profiles(id) ON DELETE CASCADE,
    user_id UUID UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    specialization TEXT NOT NULL,
    license_number TEXT NOT NULL,
    email TEXT NOT NULL,
    phone TEXT NOT NULL,
    address TEXT,
    city TEXT,
    state TEXT,
    postal_code TEXT,
    biography TEXT,
    education TEXT,
    working_hours JSONB,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);